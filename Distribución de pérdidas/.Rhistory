install.packages("rlang")
install.packages("rlang")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
require("knitcitations")
require("bibtex")
library(rmdformats)
library(readxl)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(tidyverse)
library(abind)
library(rlang)
library(tidyverse)
install.packages("rlang")
detach("package:rlang", unload = TRUE)
install.packages("rlang")
library(tidyverse)
install.packages("rlang")
library(tidyverse)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(tidyverse)
library(tidyverse)
install.packages("rlang")
library(rlang)
remove.packages("rlang", lib="~/R/win-library/4.1")
remove.packages("rlang", lib="~/R/win-library/4.1")
remove.packages("rlang", lib="~/R/win-library/4.1")
install.packages("rlang")
install.packages("rlang")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
require("knitcitations")
require("bibtex")
library(rmdformats)
library(readxl)
library(dplyr)
library(plyr)
library(fOptions)
library(ggplot2)
library(kableExtra)
library(extrafont)
library(scales)
library(xtable)
library(corrplot)
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
require("knitcitations")
require("bibtex")
library(rmdformats)
library(readxl)
library(dplyr)
library(plyr)
library(fOptions)
library(ggplot2)
library(kableExtra)
library(extrafont)
library(scales)
library(xtable)
library(corrplot)
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
require("knitcitations")
require("bibtex")
library(rmdformats)
library(readxl)
library(dplyr)
library(plyr)
library(fOptions)
library(ggplot2)
library(kableExtra)
library(extrafont)
library(scales)
library(xtable)
library(corrplot)
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
base <- read.csv('~/GitHub/II-2022/Distribución de pérdidas/Fire Incidents Data.csv')
perd <- base$Estimated_Dollar_Loss
#Los elementos de la base donde no se cuantificaron perdidas no interesan
base <- base[!is.na(perd),]
perd <- perd[!is.na(perd)]
p <- read.csv('~/GitHub/II-2022/Distribución de pérdidas/columnas.txt',sep = ',', fileEncoding = "UTF-8")
knitr::kable(p, caption = "Descripción completa de la base", longtable = TRUE) %>%
column_spec(2, width = "7cm") %>% footnote(general = 'Fuente: Elaboración propia', general_title = '') %>%
kable_styling(latex_options = c("repeat_header"),
repeat_header_continued = "Continua en siguiente pag",
repeat_header_text = "\\textit{(Continuación)}"
)
base$logEstimado <- log(base$Estimated_Dollar_Loss)
base$logEstimado <- case_when(base$Estimated_Dollar_Loss == 0 ~ 0,
TRUE ~ log(base$Estimated_Dollar_Loss))
base$TFS_Alarm_Time <- as.POSIXct(base$TFS_Alarm_Time, format = "%Y-%m-%dT%H:%M:%S")
base$TFS_Arrival_Time <- as.POSIXct(base$TFS_Arrival_Time, format = "%Y-%m-%dT%H:%M:%S")
base$tiempoAtencion <- as.numeric(difftime(base$TFS_Arrival_Time, base$TFS_Alarm_Time))
# El pairwise.complete.obs es para garantizar que tome todas las observaciones
# completas por pares, para más consultas favor consultarme
p <- base %>% select(is.numeric & !Estimated_Dollar_Loss) %>% cor(use = "pairwise.complete.obs", method = "spearman")
#xtable(tibble(colnames(p)))
colnames(p) <- 1:14
rownames(p) <- 1:14
xtable(p)
#corrplot(p)
#Este código exporta el gráfico en formato PDF
pdf("corrPlor.pdf")
corrplot(p)
dev.off()
p <- tibble(summary(base$logEstimado), summary(base$Estimated_Dollar_Loss))
p <- rbind(p, c(sd(base$logEstimado), sd(base$Estimated_Dollar_Loss)))
p <- rbind(p, c(IQR(base$logEstimado), IQR(base$Estimated_Dollar_Loss)))
colnames(p) <- c('Log pérdida estimada', 'Pérdida estimada')
rownames(p) <- c('Mínimo', '1er cuartil','Mediana','Promedio','Tercer cuartil','Máximo', 'Desviación', 'IQr')
IQR(base$logEstimado)
xtable(p)
p <-
aggregate(
base$Estimated_Dollar_Loss,
by = list(Category = base$Smoke_Alarm_at_Fire_Origin),
FUN = sum
)
p$Frecuencia <- count(base$Smoke_Alarm_at_Fire_Origin)$freq
p$Media <- p$x/p$Frecuencia
#p <- p[p$x > out,]
p <- p[order(-p$Media),]
xtable(p)
p <-
aggregate(
base$Estimated_Dollar_Loss,
by = list(Category = base$Property_Use),
FUN = sum
)
p$Frecuencia <- count(base$Property_Use)$freq
p$Media <- p$x/p$Frecuencia
#p <- p[p$x > out,]
a <- p[order(-p$x),]
a <- a[1:10,]
xtable(a)
a <- p[order(-p$Media),]
a <- a[1:10,]
xtable(a)
out <- quantile(perd, 0.95) #cuantil del 95 por ciento
grafico0 <-
ggplot(base, aes(x = Estimated_Dollar_Loss)) +
geom_histogram(color =
"darkblue", fill = "lightblue") + theme_bw() +
labs(
y = "Frecuencia",
x = "Pérdida en escala regular",
title = "Gráfico 1: Histograma en escala regular de las pérdidas",
caption = "Fuente: Elaboración propia"
)
grafico0
grafico1 <-
ggplot(base, aes(x = log(Estimated_Dollar_Loss))) +
geom_histogram(color =
"darkblue", fill = "lightblue") + theme_bw() +
labs(
y = "Frecuencia",
x = "Pérdida en escala logarítmica",
title = "Gráfico 1: Histograma en escala logarítmica de las pérdidas",
caption = "Fuente: Elaboración propia"
)
grafico1
base$Extremo <- perd >= out
grafico2 <-
ggplot(data = base) + geom_bar(
mapping = aes(x = Extremo),
color = c('blue', 'red'),
fill = c('lightblue', 'pink'),
width = 0.5,
na.rm = TRUE
) + theme_bw() +
labs(
y = "Frecuencia",
x = "Cuantil",
title = "Gráfico 1: Frecuencia del estimado de pérdidas de acuerdo al cuantil 0.95",
caption = "Fuente: Elaboración propia"
) +
scale_x_discrete(labels = c("Menor 95%", "Mayor o igual 95%"))
grafico2
p <-
data.frame(
Name = c("Masa cuantil menor a .95", "Masa cuantil mayor o igual a .95"),
Amount = c(sum(perd[perd < out]), sum(perd[perd >= out]))
)
grafico3 <- ggplot(p, aes(x = Name, y = Amount)) + geom_bar(
stat = "identity",
color = c('blue', 'red'),
fill = c('lightblue', 'pink'),
width = 0.5,
na.rm = TRUE
) + theme_bw() +
labs(
y = "Masa de la pérdida",
x = "Cuantil",
title = "Gráfico 3: Masa del estimado de pérdidas de acuerdo al cuantil 0.95",
caption = "Fuente: Elaboración propia"
) + scale_y_continuous(labels = comma) + scale_x_discrete(limits = p$Name)
grafico3
pdf("graf0.pdf")
grafico0
dev.off()
plot_grid(grafico0, grafico1, labels = "AUTO")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(mev)
library(fitdistrplus)
base <- read.csv('~/GitHub/II-2022/Distribución de pérdidas/Fire Incidents Data.csv')
perd <- base$Estimated_Dollar_Loss
#Los elementos de la base donde no se cuantificaron perdidas no interesan
base <- base[!is.na(perd),]
perd <- perd[!is.na(perd)]
base$logEstimado <- log(base$Estimated_Dollar_Loss)
base$logEstimado <- case_when(base$Estimated_Dollar_Loss == 0 ~ 0,
TRUE ~ log(base$Estimated_Dollar_Loss))
base$TFS_Alarm_Time <- as.POSIXct(base$TFS_Alarm_Time, format = "%Y-%m-%dT%H:%M:%S")
base$TFS_Arrival_Time <- as.POSIXct(base$TFS_Arrival_Time, format = "%Y-%m-%dT%H:%M:%S")
base$tiempoAtencion <- as.numeric(difftime(base$TFS_Arrival_Time, base$TFS_Alarm_Time))
perd <- base$Estimated_Dollar_Loss
n <- 1000 #La cantidad de puntos
d1 <- quantile(perd, 0.9)
d<-seq(d1,max(perd),length.out=n)
e <- function(d, X = perd){ # Funcion media de exceso para cualquier vector
index <- lapply(d, function(e){X[X>=e]-e}  )
sapply(index, mean)
}
p <- tibble(Umbral = d, Exceso = e(d))
ggplot(p, aes(x = Umbral, y = Exceso)) + geom_line() + theme_bw() +
labs(title = "Función media de exceso")
regular = perd[perd>d1]-d1
perd <- base$logEstimado
d1 <- quantile(perd, 0.9)
d<-seq(d1,max(perd),length.out=n)
p <- tibble(Umbral = d, Exceso = e(d))
# d1 <- nrow(p) - which.max(diff(rev(p$Exceso))<0)
# d1 <- p$Umbral[d1]
ggplot(p, aes(x = Umbral, y = Exceso)) + geom_line() + theme_bw() +
labs(title = "Función media de exceso log-pérdida",
caption = "Fuente: Elaboración propia")
logaritmica <- perd[perd>d1]-d1
df <- data.frame(matrix(NA, 2,0))
rownames(df) <- c('neg-verosim', 'AIC')
mod.gp <- fit.gpd(logaritmica)
df$gp <-c(mod.gp$nllh, AIC(mod.gp))
#mod.gp$param
mod.exp <- fitdist(logaritmica, 'exp')
df$exp <- c(-mod.exp$loglik, mod.exp$aic)
#mod.exp$estimate
mod.wei <- fitdist(logaritmica, 'weibull')
df$wei <- c(-mod.wei$loglik, mod.wei$aic)
df
df[, -1:3]
df[, -(1:3)]
df <- df[, -(1:3)]
mod.gp <- fit.gpd(regular)
df$gp <-c(mod.gp$nllh, AIC(mod.gp))
#mod.gp$param
dexp1 <- function(x, rate){
rate * exp(-rate * x) * (x>=0)
}
#library(extRemes)
#mod.exp <- fevd(x = regular, data = data.frame(regular),type = 'Exponential')
# -mod.exp$loglik
# mod.exp$aic
#mod.exp$estimate
mod.wei <- fitdist(regular, 'weibull')
df$wei <- c(-mod.wei$loglik, mod.wei$aic)
df
perd <- base$Estimated_Dollar_Loss
d1 <- min(perd)
d<-seq(d1,max(perd),length.out=n)
p <- tibble(Umbral = d, Exceso = e(d))
ggplot(p, aes(x = Umbral, y = Exceso)) + geom_line() + theme_bw() +
labs(title = "Función media de exceso")
perd <- base$logEstimado
d1 <- min(perd)
d<-seq(d1,max(perd),length.out=n)
p <- tibble(Umbral = d, Exceso = e(d))
ggplot(p, aes(x = Umbral, y = Exceso)) + geom_line() + theme_bw() +
labs(title = "Función media de exceso")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
F<-function(t){
F<-(t*(t+1))/20
}
probs<-diff(F(0:4))
Esperada<-probs*150#es la suma de todas las observaciones
obs<-c(21,27,39,63)
chicuadrado<-sum((Esperada-obs)^2/Esperada)
pchisq(q=chicuadrado,df=3,lower.tail = FALSE)
qchisq(0.95,df=3)#valor crítico
pchisq(q=0.14,df=2,lower.tail = FALSE)
qchisq(0.95,df=2)#valor crítico
pchisq(q=23.77,df=2,lower.tail = FALSE)
qchisq(0.95,df=2)#valor crítico
qchisq(0.95,df=1)#valor crítico
library(fitdistrplus)
library(actuar)
x<- c(27, 82, 115, 126, 155, 161, 243, 294, 340, 384, 457, 680, 855, 877, 974, 1193, 1340, 1884, 2.558, 3.476 )
fit_weibull<- fitdist(data =x, distr="weibull",method="mle")
cdfcomp(fit_weibull)
denscomp(fit_weibull)
plot(fit_weibull)
fit_Exponencial<- fitdist(data =x,distr="exp",method="mle", start = list(rate= 1/mean(x)), lower=0, upper=1)
View(grafico3)
knitr::opts_chunk$set(echo = TRUE)
qnorm(0.5398)
qnorm(0.1151)
qnorm(0.0013)
qnorm(0.7881)
F<-function(t){
F<-(t*(t+1))/20
}
probs<-diff(F(0:4))
probs
Esperada<-probs*150#es la suma de todas las observaciones
obs<-c(21,27,39,63)
chicuadrado<-sum((Esperada-obs)^2/Esperada)
pchisq(q=chicuadrado,df=3,lower.tail = FALSE)
qchisq(0.95,df=3)#valor crítico
knitr::opts_chunk$set(echo = TRUE)
F<-function(t){
F<-(t*(t+1))/20
}
F(0:4)
probs<-diff(F(0:4))
probs
Esperada<-probs*150#es la suma de todas las observaciones
Esperada
obs<-c(21,27,39,63)
obs
chicuadrado<-sum((Esperada-obs)^2/Esperada)
chicuadrado
pchisq(q=chicuadrado,df=3,lower.tail = FALSE)
qchisq(0.95,df=3)#valor crítico
F<-function(t){
F<-(t*(t+1))/20
}
x<-F(0:4)
x
probs<-diff(F(0:4))
probs
Esperada<-probs*150#es la suma de todas las observaciones
Esperada
obs<-c(21,27,39,63)
obs
chicuadrado<-sum((Esperada-obs)^2/Esperada)
chicuadrado
pchisq(q=chicuadrado,df=3,lower.tail = FALSE)
qchisq(0.95,df=3)#valor crítico
F<-function(t){
F<-(t*(t+1))/20
}
x<-F(0:4)
x
probs<-diff(F(0:4))
probs
Esperada<-probs*150#es la suma de todas las observaciones
Esperada
obs<-c(21,27,39,63)
obs
chicuadrado<-sum((Esperada-obs)^2/Esperada)
#chicuadrado
pchisq(q=chicuadrado,df=3,lower.tail = FALSE)
qchisq(0.95,df=3)#valor crítico
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
N<-rep(c(0:7),c(529,146,169,137,99,87,41,25))
binomial_loglik <- data.frame(
size = numeric(0),
prob = numeric(0),
loglik = numeric(0)
)
for (s in 7:120) {
fit_binom <- fitdist(
data = N,
dist = "binom",
fix.arg = list(size = s),
start = list(prob = 0.3)
)
binomial_loglik <- rbind(
binomial_loglik,
data.frame(
size = s,
prob = fit_binom$estimate,
fit = dbinom(
x = s,
size = s,
prob = fit_binom$estimate["prob"]
),
loglik = fit_binom$loglik
)
)
}
F<-function(t){
F<-(t*(t+1))/20
}
probs<-diff(F(0:4))
Esperada<-probs*150#es la suma de todas las observaciones
obs<-c(21,27,39,63)
chicuadrado<-sum((Esperada-obs)^2/Esperada)
pchisq(q=chicuadrado,df=3,lower.tail = FALSE)
qchisq(0.95,df=3)#valor crítico
pchisq(q=0.14,df=2,lower.tail = FALSE)
qchisq(0.95,df=2)#valor crítico
library(fitdistrplus)
library(actuar)
x<- c(27, 82, 115, 126, 155, 161, 243, 294, 340, 384, 457, 680, 855, 877, 974, 1193, 1340, 1884, 2558, 3476 )
fit_weibull<- fitdist(data =x, distr="weibull",method="mle")
cdfcomp(fit_weibull)
denscomp(fit_weibull)
plot(fit_weibull)
binomial_loglik <- data.frame(
size = numeric(0),
prob = numeric(0),
loglik = numeric(0)
)
for (s in 7:120) {
fit_binom <- fitdist(
data = N,
dist = "binom",
fix.arg = list(size = s),
start = list(prob = 0.3)
)
binomial_loglik <- rbind(
binomial_loglik,
data.frame(
size = s,
prob = fit_binom$estimate,
fit = dbinom(
x = s,
size = s,
prob = fit_binom$estimate["prob"]
),
loglik = fit_binom$loglik
)
)
}
plot(binomial_loglik$loglik)
#knitr::kable(binomial_loglik, row.names = FALSE)
fit_binom <- fitdist(
data = N,
dist = "binom",
fix.arg = list(size = 80),
start = list(prob = 0.3)
)
cdfcomp(fit_binom)
fit_Pois <- fitdist(
data = N,
dist = "pois"
)
cdfcomp(fit_Pois)
fit_Pois <- fitdist(
data = N,
dist = "pois"
)
fit_Pois
cdfcomp(fit_Pois)
fit_BinNeg <- fitdist(
data = N,
dist = "nbinom",
start=list(size=7, prob=0.5)
)
cdfcomp(fit_BinNeg)
fit_BinNeg <- fitdist(
data = N,
dist = "nbinom",
start=list(size=7, prob=0.5)
)
fit_BinNeg
cdfcomp(fit_BinNeg)
fit_Geom <- fitdist(
data = N,
dist = "geom"
)
fit_Geom
cdfcomp(fit_Geom)
gofstat(list(fit_binom, fit_Pois, fit_BinNeg, fit_Geom))
