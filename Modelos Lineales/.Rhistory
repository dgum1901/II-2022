#           interval = "confidence",
#           level = 0.90)
rstandard(modelobase1)#residual estandarizado
fitted(modelobase1) #Este ejemplo demuestra cómo encontrar los valores ajustados de un modelo de regresión lineal usando la función added().
cooks.distance(modelobase1) #La distancia de Cook es un resumen de cuánto cambia un modelo de regresión cuando se elimina la i-ésima observación
scatter.smooth( rstandard(modelobase1) ~ fitted(modelobase1) )
qqnorm( rstandard(modelobase1) )
qqline( rstandard(modelobase1) )
plot( cooks.distance(modelobase1), type="h")
influence.measures(modelobase1)$is.inf
rowSums(influence.measures(modelobase1)$is.inf)
library(readr)
doctors <- read_csv("doctors.csv")
library(dplyr)
doctors1 <- doctors%>%mutate(age = case_when( age == '35 to 44' ~ 0,
age == '45 to 54' ~ 1,
age == '55 to 64' ~ 2,
age == '65 to 74' ~ 3,
age == '75 to 84' ~ 4),
)
plot((doctors$`person-years`)/100000 ~age, data=doctors1)
library(dplyr)
doctors1 <- doctors%>%mutate(age = case_when( age == '35 to 44' ~ 1,
age == '45 to 54' ~ 2,
age == '55 to 64' ~ 3,
age == '65 to 74' ~ 4,
age == '75 to 84' ~ 5)
)
plot((doctors$`person-years`)/100000 ~age, data=doctors1)
modelopos<- glm((doctors1$deaths)/100000 ~ age + smoking, family=poisson,
data=doctors1 )
modelopos
plot( cbind(smoker, no-smoker) ~age, data=doctors2)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
carbohydrate <- read_csv("carbohydrate.csv")
plot(carbohydrate$carbohydrate~carbohydrate$age)
plot( carbohydrate~ age, data = carbohydrate)
plot(carbohydrate ~ weight, data = carbohydrate)
plot(carbohydrate ~ protein, data = carbohydrate)
summary(carbohydrate)
var(carbohydrate$age)
var(carbohydrate$carbohydrate)
var(carbohydrate$weight)
var(carbohydrate$protein)
min.model <- lm(carbohydrate ~ age +weight+protein, data=carbohydrate)
max.model <- lm( carbohydrate ~ (protein+weight+age)^2, data=carbohydrate)
auto.forward <- step( min.model, direction="forward",
scope=list(lower=min.model, upper=max.model) )
signif( coef(auto.forward), 3 )
modelobase1<-lm(carbohydrate ~ weight+protein, data=carbohydrate)
summary(modelobase1)
coef(modelobase1)
confint(modelobase1, level = 0.9)
Xmat<-model.matrix( ~ weight+protein,
data=carbohydrate)
XtX <- t(Xmat) %*% Xmat # t() is transpose; %*% is matrix multiply
y <- log(carbohydrate$carbohydrate)
inv.XtX <- solve( XtX ) # solve returns the matrix inverse
XtY <- t(Xmat) %*% y
beta <- inv.XtX %*% XtY; drop(beta)
beta <- solve(XtX, XtY); beta
QR <- qr(Xmat)
beta <- qr.coef(QR, y); beta
mu <- Xmat %*% beta
RSS <- sum( (y - mu)^2 );
RSS
s2 <- RSS / ( length(carbohydrate$carbohydrate) - length(beta) )
c(s=sqrt(s2), s2=s2)
a<-predict(modelobase1,
interval = "confidence",
level = 0.90)
MsReg<-sqrt(mean((carbohydrate$carbohydrate - a[,1])^2))
Festadista<-MsReg/s2
Festadista<-MsReg/s2
DF <- df.residual(modelobase1);
DF
df.B <- df.residual(modelobase1);
df.B
pf(Festadista, df1=DF, df2=df.B, lower.tail=FALSE)
summary(modelobase1)
# x <-(PromedioTemperatura = seq(min(x), max(x), by = 0.05))
# cosa <-
#   predict(mod_leo,
#           newdata = data.frame(x),
#           interval = "confidence",
#           level = 0.90)
rstandard(modelobase1)#residual estandarizado
fitted(modelobase1) #Este ejemplo demuestra cómo encontrar los valores ajustados de un modelo de regresión lineal usando la función added().
cooks.distance(modelobase1) #La distancia de Cook es un resumen de cuánto cambia un modelo de regresión cuando se elimina la i-ésima observación
scatter.smooth( rstandard(modelobase1) ~ fitted(modelobase1) )
qqnorm( rstandard(modelobase1) )
qqline( rstandard(modelobase1) )
plot( cooks.distance(modelobase1), type="h")
influence.measures(modelobase1)$is.inf
rowSums(influence.measures(modelobase1)$is.inf)
library(readr)
doctors <- read_csv("doctors.csv")
library(dplyr)
doctors1 <- doctors%>%mutate(age = case_when( age == '35 to 44' ~ 1,
age == '45 to 54' ~ 2,
age == '55 to 64' ~ 3,
age == '65 to 74' ~ 4,
age == '75 to 84' ~ 5)
)
plot((doctors$`person-years`)/100000 ~age, data=doctors1)
plot( cbind(smoker, no-smoker) ~age, data=doctors1)
plot( filter(smoking) ~age, data=doctors1)
plot( gropu_by(smoking)) ~age, data=doctors1)
plot(smoking) ~age, data=doctors1)
glm(formula = (doctors1$deaths)/100000  ~ age+smoking, family = binomial,
data = doctors1, weights = doctors1$`person-years`)
modelopos<- glm((doctors1$deaths)/100000 ~ age + smoking, family=poisson,
data=doctors1 )
modelopos
min(doctors1$deaths)
fit10.11quasi <- glm( (doctors1$deaths)/100000 ~ offset(log(doctors1$`person-years`) )+age + smoking,
family="quasipoisson", data=doctors1)
summary(fit10.11quasi)
plot(fit10.11quasi)
influence.measures(fit10.11quasi)$is.inf
printCoefmat(exp(coef(summary(fit10.11quasi))),digits=4)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
require("knitcitations")
require("bibtex")
library(rmdformats)
library(readxl)
library(plyr)
library(dplyr)
library(fOptions)
library(ggplot2)
library(kableExtra)
library(extrafont)
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
options(tinytex.verbose = TRUE)
library(readr)
data <- read_csv("data.csv")
library(xtable)
(data <- tibble(data))
p <- data %>% tibble() %>% select(is.numeric & !yr_built & !yr_renovated & !view & !waterfront)
a <- t(mapply(p, FUN = summary))
xtable(a)
a <- tibble(Desviacion = mapply(p, FUN = sd), IQR = mapply(p, FUN = IQR))
rownames(a) <- colnames(p)
#Se le pone doble transpuesta porque por algún motivo así acepta el formato
xtable(t(t(a)))
#Es la misma tabla de álgebra 1 xd
tablaDatos <- function(datos, columna){
x <- as.numeric(datos[[columna]]) #Acá tira warning por NA en el vector, pero no afecta
x <- x[!is.na(x)] #Aca se arregla
s <- sd(x)
n <- length(x)
# Usamos el h mas robusto normal
h <- 1.06 * min(s, IQR(x)/1.34) * n^(-1/5)
n <- floor(diff(range(x))/h)
breaks <- seq(from = min(x), to = max(x), by = (max(x)-min(x))/n) #9 subintervalos
breaks[1] <- breaks[1]-0.01 #Para que incluya al primer elemento
x<-tibble(variable = x)
tabla <- x %>% group_by(variable) %>%
mutate(
variable = cut(variable, breaks  = breaks)
) %>%
dplyr::summarise(frequency = n()) %>%
mutate(cum_frequency = cumsum(frequency))
tabla$rf <- tabla$frequency/sum(tabla$frequency)
tabla$'crf(%)' <- cumsum(tabla$rf)*100
tabla$'rf(%)' <- tabla$rf*100
colnames(tabla)[1:3]<- c("Intervalo","f","cf")
tabla<-tabla %>% mutate_if(is.numeric, ~round(., 2))
tabla
}
#Precio
dt<-tablaDatos(data,2)
xtable(dt)
#Tamano construccion
dt<-tablaDatos(data,11)
xtable(dt)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
require("knitcitations")
require("bibtex")
library(rmdformats)
library(readxl)
library(plyr)
library(dplyr)
library(fOptions)
library(ggplot2)
library(kableExtra)
library(extrafont)
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
options(tinytex.verbose = TRUE)
library(readr)
data <- read_csv("data.csv")
library(xtable)
(data <- tibble(data))
p <- data %>% tibble() %>% select(is.numeric & !yr_built & !yr_renovated & !view & !waterfront)
a <- t(mapply(p, FUN = summary))
xtable(a)
a <- tibble(Desviacion = mapply(p, FUN = sd), IQR = mapply(p, FUN = IQR))
rownames(a) <- colnames(p)
#Se le pone doble transpuesta porque por algún motivo así acepta el formato
xtable(t(t(a)))
#Es la misma tabla de álgebra 1 xd
tablaDatos <- function(datos, columna){
x <- as.numeric(datos[[columna]]) #Acá tira warning por NA en el vector, pero no afecta
x <- x[!is.na(x)] #Aca se arregla
s <- sd(x)
n <- length(x)
# Usamos el h mas robusto normal
h <- 1.06 * min(s, IQR(x)/1.34) * n^(-1/5)
n <- floor(diff(range(x))/h)
breaks <- seq(from = min(x), to = max(x), by = (max(x)-min(x))/n) #9 subintervalos
breaks[1] <- breaks[1]-0.01 #Para que incluya al primer elemento
x<-tibble(variable = x)
tabla <- x %>% group_by(variable) %>%
mutate(
variable = cut(variable, breaks  = breaks)
) %>%
dplyr::summarise(frequency = n()) %>%
mutate(cum_frequency = cumsum(frequency))
tabla$rf <- tabla$frequency/sum(tabla$frequency)
tabla$'crf(%)' <- cumsum(tabla$rf)*100
tabla$'rf(%)' <- tabla$rf*100
colnames(tabla)[1:3]<- c("Intervalo","f","cf")
tabla<-tabla %>% mutate_if(is.numeric, ~round(., 2))
tabla
}
#Precio
dt<-tablaDatos(data,2)
xtable(dt)
#Tamano construccion
dt<-tablaDatos(data,11)
xtable(dt)
View(data)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
require("knitcitations")
require("bibtex")
library(rmdformats)
library(readxl)
library(plyr)
library(dplyr)
library(fOptions)
library(ggplot2)
library(kableExtra)
library(extrafont)
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
options(tinytex.verbose = TRUE)
library(readr)
data <- read_csv("data.csv")
library(xtable)
(data <- tibble(data))
#Es la misma tabla de álgebra 1 xd
tablaDatos <- function(datos, columna){
x <- as.numeric(datos[[columna]]) #Acá tira warning por NA en el vector, pero no afecta
x <- x[!is.na(x)] #Aca se arregla
s <- sd(x)
n <- length(x)
# Usamos el h mas robusto normal
h <- 1.06 * min(s, IQR(x)/1.34) * n^(-1/5)
n <- floor(diff(range(x))/h)
breaks <- seq(from = min(x), to = max(x), by = (max(x)-min(x))/n) #9 subintervalos
breaks[1] <- breaks[1]-0.01 #Para que incluya al primer elemento
x<-tibble(variable = x)
tabla <- x %>% group_by(variable) %>%
mutate(
variable = cut(variable, breaks  = breaks)
) %>%
dplyr::summarise(frequency = n()) %>%
mutate(cum_frequency = cumsum(frequency))
tabla$rf <- tabla$frequency/sum(tabla$frequency)
tabla$'crf(%)' <- cumsum(tabla$rf)*100
tabla$'rf(%)' <- tabla$rf*100
colnames(tabla)[1:3]<- c("Intervalo","f","cf")
tabla<-tabla %>% mutate_if(is.numeric, ~round(., 2))
tabla
}
#Precio
dt<-tablaDatos(data,2)
xtable(dt)
#Tamano construccion
dt<-tablaDatos(data,11)
xtable(dt)
# Para evitar menos inf
data <- data %>% mutate( logprecio = case_when(
data$price <1  ~ 0,
TRUE ~ log(data$price)
))
data$yr_renovated <- as.numeric(data$yr_renovated > 0)
data$yr_built <- as.numeric(data$yr_built> 2014-40)
data$sqft_basement <- as.numeric(data$sqft_basement > 0)
#Eliminamos las que son cero
data <- data[data$logprecio != 0,]
#hist(data$logprecio, breaks = 100, xlab = 'Log - Precio', ylab = 'Frecuencia')
grafico1 <- ggplot(data, aes(x=logprecio))+
geom_histogram(color="darkblue", fill="lightblue", bins = 100) + theme_bw() +
labs(
y = "Frecuencia",
x = "Precio en escala logarítmica",
title = "Gráfico 1: Histograma en escala logarítmica de los precios",
caption = "Fuente: Elaboración propia"
)
grafico1
pdf("graf1.pdf")
grafico1
dev.off()
grafico1 <- ggplot(data, aes(x=logprecio))+
geom_histogram(color="darkblue", fill="lightblue", bins = 100) + theme_bw() +
labs(
y = "Frecuencia",
x = "Precio en escala logarítmica",
#title = "Gráfico 1: Histograma en escala logarítmica de los precios",
#caption = "Fuente: Elaboración propia"
)
grafico1
pdf("graf1.pdf")
grafico1
dev.off()
mean(data$logprecio)
exp(mean(data$logprecio))
library(dplyr)
p <- data %>% select(is.numeric) %>% cor(use = "pairwise.complete.obs", method = "spearman")
xtable(data.frame(Nombre = colnames(p)))
#xtable(tibble(colnames(p)))
colnames(p) <- 1:14
rownames(p) <- 1:14
xtable(p)
#corrplot(p)
library(reshape2)
q <- melt(p)
library(ggplot2)
ggplot(data = q, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
df <-  data.frame(x = data$sqft_living, y = data$sqft_above)
graf2 <- ggplot(df, aes(x, y))+
geom_point()+
geom_smooth(method = lm, formula = y ~ x) + theme_bw()+
labs(
y = "Superficie de construcción",
x = "Superficie habitable",
#title = "Gráfico 2: Contraste de variables con regresión lineal",
#caption = "Fuente: Elaboración propia"
)
graf2
pdf("graf2.pdf")
graf2
dev.off()
df <- data.frame(x = data$city, y = data$logprecio)
df$x <- as.factor(df$x)
graf3 <-
ggplot(df, aes(x = reorder(x, y, FUN = mean), y = y))+theme_bw() +
geom_boxplot() + theme(axis.text.x = element_text(
angle = 90,
vjust = 0.5,
hjust = 1
))+
labs(
y = "Precio en escala logarítmica",
x = "Ciudad",
title = "Gráfico 3: Diagrama de cajas ordenado respecto a mediana",
caption = "Fuente: Elaboración propia"
)
graf3
pdf("graf3.pdf")
graf3
dev.off()
df <- data.frame(x = data$city, y = data$logprecio)
df$x <- as.factor(df$x)
graf3 <-
ggplot(df, aes(x = reorder(x, y, FUN = mean), y = y))+theme_bw() +
geom_boxplot() + theme(axis.text.x = element_text(
angle = 90,
vjust = 0.5,
hjust = 1
))+
labs(
y = "Precio en escala logarítmica",
x = "Ciudad",
#title = "Gráfico 3: Diagrama de cajas ordenado respecto a mediana",
#caption = "Fuente: Elaboración propia"
)
graf3
pdf("graf3.pdf")
graf3
dev.off()
graf4 <- ggplot(df, aes(x = reorder(x, y, FUN = mean), y = y)) +
geom_bar(stat="identity") + theme_bw() + theme(axis.text.x = element_text(
angle = 90,
vjust = 0.5,
hjust = 1
))+
labs(
y = "Frecuencia",
x = "Ciudad",
#title = "Gráfico 4: Frecuencia de observación por ciudad",
#caption = "Fuente: Elaboración propia"
)
graf4
pdf("graf4.pdf")
graf4
dev.off()
graf4 <- ggplot(df, aes(x = reorder(x, y, FUN = mean), y = y)) +
geom_bar(stat="identity") + theme_bw() + theme(axis.text.x = element_text(
angle = 90,
vjust = 0.5,
hjust = 1
))+
labs(
y = "Frecuencia",
x = "Ciudad",
#title = "Gráfico 4: Frecuencia de observación por ciudad",
#caption = "Fuente: Elaboración propia"
)
graf4
pdf("graf4.pdf")
graf4
dev.off()
hist(data$condition)
ggplot(data, aes(x=condition))+geom_bar()
geom_histogram(color="darkblue", fill="lightblue")
#
# data %>%
#   group_by(city) %>%
#   summarise(n = n_distinct(Name)) %>%
#   ggplot()  + geom_col(aes(city, n))
#   #ggplot() + geom_bar(aes(Date, n), stat = "identity")
#
#
#
#
# data %>%
#   group_by(condition) %>%
#   summarize(x=dplyr::n()) %>%
# ggplot(., aes(condition, x, fill = as.factor(condition)))+
#   geom_bar(stat = "identity", col = "black", alpha = .85)+
#   scale_fill_brewer(palette = "Spectral")+
#   geom_text(aes(y = x+120, label = x), size = 7.5)+
#   theme_fivethirtyeight()+
#   theme(legend.position = "none", axis.title = element_text(size = 16), axis.text = element_text(size = 16), axis.line = element_line(size = 0.4, colour = "grey10"))+
#   labs(x = "House condition [from 1 to 5]", y = "Frequency", caption = "© Made by Michau96/Kaggle")
set.seed(1921)
filas <- sample(nrow(data), nrow(data)* 0.8, replace = FALSE)
train2 <- data[filas,]
test2 <- data[-filas,]
library(mgcv)
gam1 <-
gam(
logprecio ~ s(sqft_living) + s(sqft_lot) + bedrooms + yr_built + yr_renovated +
(sqft_basement) + condition,
data = train2
)
summary(gam1)
gam2 <-
gam(
logprecio ~ bathrooms + bedrooms + s(sqft_lot) + floors + s(sqft_living) + condition + yr_built + s(sqft_above) + yr_renovated + city,
data = train2
)
summary(gam2)
checkeo <- gam.check(gam2)
pdf("graficocheck.pdf")
gam.check(gam2)
dev.off()
pdf("graf5.pdf")
par(mfrow=c(2, 2))
qq.gam(gam2,rep=100); plot(fitted(gam2),residuals(gam2), xlab = 'Predictor lineal', ylab = 'Residuos')
hist(gam2$residuals,xlab = 'Residuos', ylab='Frecuencuia', main = 'Histograma de Residuos')
plot(gam2$fitted.values, train2$logprecio, xlab = 'Valores ajustados', ylab='log-precio', mean = 'Variable respuesta contra valores ajustados')
dev.off()
par(mfrow=c(2, 2))
qq.gam(gam2,rep=100); plot(fitted(gam2),residuals(gam2), xlab = 'Predictor lineal', ylab = 'Residuos')
hist(gam2$residuals,xlab = 'Residuos', ylab='Frecuencuia', main = 'Histograma de Residuos')
plot(gam2$fitted.values, train2$logprecio, xlab = 'Valores ajustados', ylab='log-precio', mean = 'Variable respuesta contra valores ajustados')
rnorm(1000)
pene <- rnorm(1000)
hist(pene)
hist(pene. breaks = 100)
hist(pene, breaks = 100)
ggplot(pene) + geom_histogram()
ggplot(pene) + geom_point()
hist(pene, breaks = 100)
pene <- rnorm(1000)
pdf("graficoPENE.pdf")
hist(pene, breaks = 100)
dev.off()
